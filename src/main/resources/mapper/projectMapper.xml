<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="me.project.funding.mapper.ProjectMapper">

    <sql id="selectFromProject">
        select
            project_no
            , member_no
            , category_id
            , project_title
            , project_intro
            , budget_plan
            , schedule_plan
            , project_image
            , project_price
            , open_date
            , close_date
            , delivery_date
            , project_content
            , fund_price
            , project_step
        from project
    </sql>

    <resultMap id="ProjectWithMember" type="me.project.funding.dto.ProjectDTO">
        <association property="me.project.funding.dto.MemberDTO" column="memberNo" javaType="me.project.funding.dto.MemberDTO" select="selectMember">
        </association>
    </resultMap>
    <resultMap id="ProjectWithCategory" type="me.project.funding.dto.ProjectDTO">
        <id property="projectNo" column="project_no" />
        <result property="memberNo" column="member_no" />
        <result property="categoryId" column="category_id" />
        <result property="projectTitle" column="project_title" />
        <result property="projectIntro" column="project_intro" />
        <result property="budgetPlan" column="budget_plan" />
        <result property="schedulePlan" column="schedule_plan" />
        <result property="projectImage" column="project_image" />
        <result property="projectPrice" column="project_price" />
        <result property="openDate" column="open_date" />
        <result property="closeDate" column="close_date" />
        <result property="deliveryDate" column="delivery_date" />
        <result property="projectContent" column="project_content" />
        <result property="fundPrice" column="fund_price" />
        <result property="sum" column="sum" />
        <result property="projectStep" column="project_step" />
        <association property="category" column="category_no" javaType="me.project.funding.dto.CategoryDTO">
            <id property="categoryNo" column="category_no" />
            <result property="categoryName" column="category_name" />
        </association>
    </resultMap>
    <resultMap id="RewardWithProject" type="me.project.funding.dto.RewardDTO">
        <association property="me.project.funding.dto.ProjectDTO" column="projectNo" javaType="me.project.funding.dto.ProjectDTO" select="selectProject">
        </association>
    </resultMap>

    <select id="selectMember" resultType="me.project.funding.dto.MemberDTO">
        select * from member
    </select>
    <select id="selectProject" resultType="me.project.funding.dto.ProjectDTO">
        select * from project
    </select>
    <select id="selectCategory" resultType="me.project.funding.dto.CategoryDTO">
        select * from category
    </select>


    <select id="findOnWritingProject" parameterType="me.project.funding.dto.MemberDTO" resultType="me.project.funding.dto.ProjectDTO">
        <include refid="selectFromProject"/>
        where member_no = #{memberNo}
            and project_step = 0
    </select>

    <select id="findByNo" parameterType="int" resultMap="ProjectWithCategory">
        select *
        from project p
                 left join(
            select project_no, sum(payment_total) sum
            from payment
            group by project_no) py
                          on py.project_no = p.project_no
                 join category c
                      on c.category_no = p.category_id
        where p.project_no = #{projectNo}
    </select>

    <insert id="insert" parameterType="me.project.funding.dto.ProjectDTO">
        <selectKey order="BEFORE" resultType="int" keyProperty="projectNo">
            select project_seq.nextval from dual
        </selectKey>
        insert into project (project_no, project_intro, category_id, member_no)
        values (#{projectNo}, #{projectIntro}, #{categoryId}, #{memberNo})
    </insert>

    <update id="update" parameterType="me.project.funding.dto.ProjectDTO">
        update project
            set
                category_id = NVL(#{categoryId}, category_id)
                , project_title = NVL(#{projectTitle}, project_title)
                , project_intro = NVL(#{projectIntro}, project_intro)
                , budget_plan =NVL(#{budgetPlan},budget_plan)
                , schedule_plan = NVL(#{schedulePlan}, schedule_plan)
                , project_image = NVL(#{projectImage}, project_image)
                <if test="projectPrice != 0">
                , project_price = NVL(#{projectPrice}, project_price)
                </if>
                , open_date = NVL(#{openDate}, open_date)
                , close_date = NVL(#{closeDate}, close_date)
                , delivery_date = NVL(#{deliveryDate}, delivery_date)
                , project_content = NVL(#{projectContent}, project_content)
        where project_no = #{projectNo}
    </update>

    <delete id="delete" parameterType="int">
        delete project
        where project_no = #{projectNo}
    </delete>

    <select id="getCategory" resultType="me.project.funding.dto.CategoryDTO">
        select category_no, category_name
        from category
        order by category_no
    </select>

    <select id="getTotalCnt" parameterType="me.project.funding.commons.Pagination" resultType="int">
        select count(*)
        from project
        <where>
            <if test="category != null and !''.equals(category)">
                AND category_id = #{category}
            </if>
            <if test="keyword != null and !''.equals(keyword)">
                AND project_title LIKE '%' || #{keyword} || '%'
            </if>
            <if test="filter != null and !''.equals(filter)">
                AND project_step = #{filter}
            </if>
        </where>
    </select>

    <select id="findAllByFilterAndOrder" parameterType="me.project.funding.commons.Pagination" resultType="me.project.funding.dto.ProjectDTO">
        select
        row_number() over (order by pj.project_no desc) r
        , pj.*
        , nvl(sum, 0) sum
        from project pj
            left join (
                    select project_no, sum(payment_total) sum
                    from payment
                    group by project_no
                ) py
                on pj.project_no = py.project_no

        <where>
            <if test="category != null and !''.equals(category)">
                AND category_id = #{category}
            </if>
            <if test="keyword != null and !''.equals(keyword)">
                AND project_title LIKE '%' || #{keyword} || '%'
            </if>
            <if test="filter != null and !''.equals(filter)">
                AND project_step = #{filter}
            </if>
        </where>

        <choose>
            <when test="order != null and order.equals('open_date')">
                order by open_date desc
            </when>
            <when test="order != null and order.equals('close_date')">
                order by open_date
            </when>
            <otherwise>
                order by r
            </otherwise>
        </choose>

    </select>

    <select id="getContributorsCntByProjectNo" resultType="java.lang.Integer" parameterType="int">
        select NVL(contributors, 0) contributors
        from project p
            left join (
            select py.project_no, count(distinct o.member_no) contributors
            from payment py
                join order_tb o on py.order_no = o.order_no
            group by py.project_no
            ) po on p.project_no = po.project_no
        where p.project_no = #{projectNo}
    </select>

    <select id="findLike" parameterType="int" resultType="int">
        select count(*)
        from project_like
        where project_no = #{projectNo} and member_no = #{memberNo}
    </select>

    <insert id="insertLike" parameterType="int">
        insert into project_like (like_no, project_no, member_no)
        values (project_like_seq.nextval, #{projectNo}, #{memberNo})
    </insert>

    <delete id="deleteLike" parameterType="int">
        delete project_like
        where project_no = #{projectNo} and member_no = #{memberNo}
    </delete>

    <select id="findAllSupportProject" parameterType="map" resultType="map">
        select
            pj.project_no "projectNo"
            , project_title "projectTitle"
            , close_date "closeDate"
            , p.payment_day "paymentDay"
            , r.reward_intro "rewardIntro"
            , p.payment_total "paymentTotal"
            , pj.project_image "projectImage"
        from payment p
                 join order_tb o on p.order_no = o.order_no
                 join reward_order ro on o.order_no = ro.order_no
                 join reward r on ro.reward_no = r.reward_no
                 join project pj on p.project_no = pj.project_no
        <where>
            pj.member_no = #{memberNo} and payment_status = 1
            <if test="keyword != null and !''.equals(keyword)">
            and pj.project_title like '%' || #{keyword} || '%'
            </if>
        </where>
    </select>

    <select id="findLikeProjects" parameterType="int" resultType="me.project.funding.dto.ProjectDTO">
        select
            p.project_no
             , p.member_no
             , category_id
             , project_title
             , project_intro
             , budget_plan
             , schedule_plan
             , project_image
             , project_price
             , open_date
             , close_date
             , delivery_date
             , project_content
             , fund_price
             , project_step
        from project_like pl
                 join member m on pl.member_no = m.member_no
                 join project p on pl.project_no = p.project_no
        where pl.member_no = #{memberNo}
    </select>

    <select id="findMemberProjects" parameterType="int" resultType="me.project.funding.dto.ProjectDTO">
        select pj.project_title, pj.project_intro, pj.project_image, pj.project_step, st.step_name, pj.project_no
        from project pj
            join project_step_tb st on pj.project_step = st.project_step
        where member_no = #{memberNo}
        <if test="projectStep >= 0">
        and st.project_step = #{projectStep}
        </if>
        order by pj.project_no
    </select>
</mapper>